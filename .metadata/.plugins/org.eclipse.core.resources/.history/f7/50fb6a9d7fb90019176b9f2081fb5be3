/*
 * package com.outflearn.Outflearn.service;
 * 
 * import java.util.ArrayList; import java.util.List;
 * 
 * import org.springframework.beans.factory.annotation.Autowired; import
 * org.springframework.beans.factory.annotation.Value; import
 * org.springframework.context.annotation.Bean; import
 * org.springframework.context.annotation.ComponentScan.Filter; import
 * org.springframework.context.annotation.Configuration; import
 * org.springframework.security.config.annotation.web.builders.HttpSecurity;
 * import org.springframework.security.config.annotation.web.configuration.
 * EnableWebSecurity; import
 * org.springframework.security.config.annotation.web.configuration.
 * WebSecurityConfigurerAdapter; import
 * org.springframework.security.oauth2.client.DefaultOAuth2ClientContext; import
 * org.springframework.security.oauth2.client.OAuth2ClientContext; import
 * org.springframework.security.oauth2.client.OAuth2RestTemplate; import
 * org.springframework.security.oauth2.client.filter.
 * OAuth2ClientAuthenticationProcessingFilter; import
 * org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter;
 * import org.springframework.security.oauth2.client.token.grant.code.
 * AuthorizationCodeResourceDetails; import
 * org.springframework.security.oauth2.client.token.grant.implicit.
 * ImplicitResourceDetails; import
 * org.springframework.security.oauth2.config.annotation.web.configuration.
 * EnableOAuth2Client; import
 * org.springframework.security.web.authentication.www.
 * BasicAuthenticationFilter; import
 * org.springframework.web.filter.CompositeFilter;
 * 
 * import com.outflearn.Outflearn.model.biz.LoginBizImpl;
 * 
 * @Configuration
 * 
 * @EnableWebSecurity
 * 
 * @EnableOAuth2Client public class UserOAuth2ClientConfig extends
 * WebSecurityConfigurerAdapter {
 * 
 * @Autowired OAuth2ClientContext oauth2ClientContext;
 * 
 * @Autowired LoginBizImpl lobinBiz;
 * 
 * @Autowired UserDeniedHandler UserDeniedHandler;
 * 
 * @Autowired UserLoginSuccessHandler UserLoginSuccessHandler;
 * 
 * @Bean
 * 
 * @Value("${security.oauth2.client}") public AuthorizationCodeResourceDetails
 * github() { return new AuthorizationCodeResourceDetails();
 * 
 * }
 * 
 * @Bean
 * 
 * @Value("${security.oauth2.resource}") public ImplicitResourceDetails
 * githubResource() { return new ImplicitResourceDetails(); }
 * 
 * @Bean public OAuth2ClientContext auth2ClientContext() { return new
 * DefaultOAuth2ClientContext(); }
 * 
 * @Override protected void configure(HttpSecurity http) throws Exception { http
 * .authorizeRequests() .antMatchers("/private/**").hasAnyRole("USER")
 * .antMatchers("/admin/**").hasAnyRole("ADMIN") .anyRequest().permitAll()
 * .and() .formLogin() .loginPage("/login") .usernameParameter("username")
 * .passwordParameter("password") .failureUrl("/login") .and() .logout()
 * .deleteCookies("JSESSIONID") .clearAuthentication(true)
 * .invalidateHttpSession(true) .and() .exceptionHandling() //
 * .accessDeniedPage("/access_denied") .accessDeniedHandler(UserDeniedHandler)
 * .and() // new .addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class)
 * // new ; }
 * 
 * private Filter ssoFilter() { CompositeFilter filter = new CompositeFilter();
 * List<Filter> filters = new ArrayList<>(); filters.add(ssoFilter(github(),
 * "/login/github")); filter.setFilters(filters); return filter; } private
 * Filter ssoFilter(ClientResources client, String path) {
 * 
 * OAuth2ClientAuthenticationProcessingFilter filter = new
 * OAuth2ClientAuthenticationProcessingFilter(path); OAuth2RestTemplate template
 * = new OAuth2RestTemplate(client.getClient(), auth2ClientContext);
 * filter.setRestTemplate(template); UserInfoTokenServices tokenServices = new
 * UserInfoTokenServices(client.getResource().getUserInfoUri(),
 * client.getClient().getClientId()); tokenServices.setRestTemplate(template);
 * filter.setTokenServices(tokenServices);
 * 
 * return filter; } }
 */